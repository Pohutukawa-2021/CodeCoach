@mixin word-wrap($break-word: break-word, $break-all: break-all, $auto: auto) {
    overflow-wrap: $break-word;
    word-wrap: $break-word;
    -ms-word-break: $break-all;
    word-break: $break-all;
    word-break: $break-word;
    -ms-hyphens: $auto;
    -moz-hyphens: $auto;
    -webkit-hyphens: $auto;
    hyphens: $auto;
}

@mixin prefix($declarations, $prefixes: ()) {
    @each $property, $value in $declarations {
        @each $prefix in $prefixes {
            #{'-' + $prefix + '-' + $property}: $value
        }
        #{$property}: $value;
    }
}

// Breakpoints
$breakpoints: (
    mobile: 768px,
    tablet: 1020px,
    laptop: 1240px,
    desktop: 1480px
);

@mixin media-queries($breakpoint, $direction) {
    @if map-has-key($breakpoints, $breakpoint) {
        $breakpoint-value: map-get($breakpoints, $breakpoint);

        @if $direction == max {
          @media (max-width: ($breakpoint-value - 1)) {
            @content;
          }
        } @else if $direction == min {
          @media (min-width: $breakpoint-value) {
            @content;
          }
        } @else {
          @media ($direction: $breakpoint-value) {
            @content
          }
        }
    
    
    } @else {
        @if $direction == max {
            @media (max-width: $breakpoint) {
            @content;
            }
        } @else if $direction == min {
            @media (min-width: $breakpoint) {
            @content;
            }
        } @else {
            @media ($direction: $breakpoint) {
            @content
            }
        }
    }
}